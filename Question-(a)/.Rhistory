prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
boxplot(prestige ~ Occupation, data = data,
main = "Prestige Scores by Occupation Type",
xlab = "Occupation Type",
ylab = "Prestige Score",
col = "lightblue")
#task 6
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
boxplot(prestige ~ Occupation, data = data,
main = "Prestige Scores by Occupation Type",
xlab = "Occupation Type",
ylab = "Prestige Score",
col = "lightblue")
#task 6
# Summary statistics for prestige by occupation
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
# Perform ANOVA to test for significant differences in prestige based on occupation
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
# Set up the plotting area for histograms
# Adjust the layout to avoid "figure margins too large" error
par(mfrow = c(ceiling(length(unique(data$Occupation)) / 2), 2), mar = c(4, 4, 2, 1))
# Create histograms for each occupation
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
# Reset plot layout to default
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
# Summary statistics for prestige by occupation
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
# Perform ANOVA to test for significant differences in prestige based on occupation
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
# Set up the plotting area for histograms
# Adjust the layout to avoid "figure margins too large" error
par(mfrow = c(ceiling(length(unique(data$Occupation)) / 2), 2), mar = c(4, 4, 2, 1))
# Create histograms for each occupation
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
par(mfrow = c(ceiling(length(unique(data$Occupation)) / 2), 2), mar = c(4, 4, 2, 1))
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
par(mfrow = c(ceiling(length(unique(data$Occupation)) / 2), 2), mar = c(4, 4, 2, 1))
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
par(mfrow = c(ceiling(length(unique(data$Occupation)) / 2), 2), mar = c(2, 2, 2, 1))
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
occupations <- unique(data$Occupation)
for (occupation in occupations) {
hist(data$prestige[data$Occupation == occupation],
main = paste("Prestige Distribution for", occupation),
xlab = "Prestige Score",
col = "lightblue",
xlim = c(min(data$prestige, na.rm = TRUE), max(data$prestige, na.rm = TRUE)),
breaks = 10)  # Adjust number of breaks if needed
}
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
boxplot(prestige ~ Occupation, data = data,
main = "Prestige Scores by Occupation Type",
xlab = "Occupation Type",
ylab = "Prestige Score",
col = "lightblue")
#
weight.data <- c(90,53,51,85,56,62,72,61,51,73,69,45,43,48,35)
hist(weight.data,xlab = "weight",col = "green", border = "blue")
#
str(airquality)
temperature <- airquality$Temp
hist(temperature)
hist(temperature,main="Maximum daily temperature",xlab="Temperature in degrees Fahreheit",xlim=c(50,100),col = "darkmagenta",freq=FALSE)
#
hist(iris$Petal.Length, freq = FALSE, col="red",xlab = "Petal length",main = "colored histogram")
hist(iris$Petal.Length, freq = FALSE, col="red",breaks=10,xlab = "Petal length",main = "colored histogram")
#
curve(dnorm(x,mean=mean(iris$Petal.Length),sd=sd(iris$Petal.Length)),add=TRUE,col="blue")
scores <- c(88,92,94,78,88,92)
shapiro.test(scores)
weight <- c(95.7,68.9,60.3,60.5,69.7,59.7)
hist(weight,breaks = seq(0,170,10),freq = FALSE,main = "weight of man (aged 19-24 years, average height)",xlab = "kg")
y_bar <- mean(weight)
s <- sd(weight)
curve(dnorm(x,mean = y_bar, sd = s),from = 0,to = 170, add = TRUE, col="red")
#
set.seed(0)
data <- rpois(n=100, lambda = 3)
print(data)
shapiro.test(data)
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
data <- read.csv(file_path)
prestige_summary <- aggregate(prestige ~ Occupation, data = data, summary)
print(prestige_summary)
anova_results <- aov(prestige ~ Occupation, data = data)
summary(anova_results)
boxplot(prestige ~ Occupation, data = data,
main = "Prestige Scores by Occupation Type",
xlab = "Occupation Type",
ylab = "Prestige Score",
col = "lightblue")
model <- lm(prestige ~ education, data = data)
model_summary <- summary(model)
print(model_summary)
p_value <- model_summary$coefficients[2, 4]
if (p_value < 0.05) {
cat("Reject the null hypothesis: There is a significant relationship between prestige and education.\n")
} else {
cat("Fail to reject the null hypothesis: No significant relationship between prestige and education.\n")
}
cat("P-value for the education coefficient:", p_value, "\n")
model <- lm(prestige ~ education, data = data)
model_summary <- summary(model)
print(model_summary)
p_value <- model_summary$coefficients[2, 4]
if (p_value < 0.05) {
cat("Reject the null hypothesis: There is a significant relationship between prestige and education.\n")
} else {
cat("Fail to reject the null hypothesis: No significant relationship between prestige and education.\n")
}
cat("P-value for the education coefficient:", p_value, "\n")
correlation <- cor(data$prestige, data$education, use = "complete.obs")
cat("Correlation Coefficient between prestige and education:", correlation, "\n")
shapiro_test <- shapiro.test(model$residuals)
print(shapiro_test)
if (shapiro_test$p.value > 0.05) {
cat("Fail to reject the null hypothesis: Residuals are normally distributed.\n")
} else {
cat("Reject the null hypothesis: Residuals are not normally distributed.\n")
}
model <- lm(prestige ~ income, data = data)
model_summary <- summary(model)
print(model_summary)
p_value <- model_summary$coefficients[2, 4]
if (p_value < 0.05) {
cat("Reject the null hypothesis: There is a significant relationship between prestige and income.\n")
} else {
cat("Fail to reject the null hypothesis: No significant relationship between prestige and income.\n")
}
cat("P-value for the income coefficient:", p_value, "\n")
correlation <- cor(data$prestige, data$income, use = "complete.obs")
cat("Correlation Coefficient between prestige and income:", correlation, "\n")
shapiro_test <- shapiro.test(model$residuals)
print(shapiro_test)
if (shapiro_test$p.value > 0.05) {
cat("Fail to reject the null hypothesis: Residuals are normally distributed.\n")
} else {
cat("Reject the null hypothesis: Residuals are not normally distributed.\n")
}
model <- lm(prestige ~ women, data = data)
model_summary <- summary(model)
print(model_summary)
p_value <- model_summary$coefficients[2, 4]
if (p_value < 0.05) {
cat("Reject the null hypothesis: There is a significant relationship between prestige and the percentage of women.\n")
} else {
cat("Fail to reject the null hypothesis: No significant relationship between prestige and the percentage of women.\n")
}
cat("P-value for the percentage of women coefficient:", p_value, "\n")
correlation <- cor(data$prestige, data$women, use = "complete.obs")
cat("Correlation Coefficient between prestige and the percentage of women:", correlation, "\n")
shapiro_test <- shapiro.test(model$residuals)
print(shapiro_test)
if (shapiro_test$p.value > 0.05) {
cat("Fail to reject the null hypothesis: Residuals are normally distributed.\n")
} else {
cat("Reject the null hypothesis: Residuals are not normally distributed.\n")
}
setwd("C:/Users/User/Downloads/ABI-CIS6008-MAR-2025-Dataset/ABI-CIS6008-MAR-2025-Dataset/Question-(a)")
library(tidyverse)
# --- 1. Load and Inspect Data ---
data <- read_csv('UQR.csv')
print('--- Data Structure (str) ---')
str(data)
print('--- Data Summary ---')
summary(data)
print('--- Head of Data ---')
head(data)
data <- data %>%
rename_with(~ str_replace_all(., ' ', '_')) %>%
rename_with(~ str_replace_all(., '%', 'Perc')) %>%
rename_with(~ str_replace_all(., '\\(Avg.\\)', 'Avg')) %>%
rename_with(~ str_replace_all(., '\\(Million_USD\\)', 'Million_USD')) %>%
rename_with(~ str_replace_all(., '\\(USD\\)', 'USD'))
print('--- Data Structure after Renaming Columns ---')
str(data)
# --- 2. Check for Missing Values & Clean Data ---
print('--- Missing Values Check ---')
missing_values <- colSums(is.na(data))
print(missing_values)
if (any(missing_values > 0)) {
print('--- Removing rows with missing values ---')
data_cleaned <- na.omit(data)
print(paste('Number of rows before cleaning:', nrow(data)))
print(paste('Number of rows after cleaning:', nrow(data_cleaned)))
} else {
print('No missing values found. Data is clean.')
data_cleaned <- data
}
numerical_cols <- data_cleaned %>%
select(-Institution_Name, -Institution_Type) %>%
select_if(is.numeric) %>%
names()
# --- 3. Normality Tests (Shapiro-Wilk) ---
print('--- Shapiro-Wilk Normality Tests ---')
for (col in numerical_cols) {
if (length(unique(data_cleaned[[col]])) > 1) {
print(paste('Shapiro-Wilk Test for:', col))
shapiro_test <- shapiro.test(data_cleaned[[col]])
print(shapiro_test)
} else {
print(paste('Skipping Shapiro-Wilk Test for', col, 'due to lack of variance.'))
}
}
library(nortest)
# --- Anderson-Darling Normality Test ---
print('--- Anderson-Darling Normality Tests ---')
for (col in numerical_cols) {
if (length(unique(data_cleaned[[col]])) > 1) {
print(paste('Anderson-Darling Test for:', col))
ad_test <- ad.test(data_cleaned[[col]])
print(ad_test)
} else {
print(paste('Skipping Anderson-Darling Test for', col, 'due to lack of variance.'))
}
}
# --- Lilliefor's (Kolmogorov-Smirnov) Normality Test ---
print('--- Lilliefor\'s Normality Tests ---')
for (col in numerical_cols) {
if (length(unique(data_cleaned[[col]])) > 1) {
print(paste('Lilliefor\'s Test for:', col))
lillie_test <- lillie.test(data_cleaned[[col]])
print(lillie_test)
} else {
print(paste('Skipping Lilliefor\'s Test for', col, 'due to lack of variance.'))
}
}
# --- 4. Visualizations: Histograms and Q-Q Plots ---
print('--- Generating Histograms and Q-Q Plots ---')
pdf('UQR_EDA_Plots.pdf', width = 10, height = 7)
# Histograms
for (col in numerical_cols) {
p <- ggplot(data_cleaned, aes(x = !!sym(col))) +
geom_histogram(binwidth = diff(range(data_cleaned[[col]], na.rm = TRUE)) / 30,
fill = 'skyblue', color = 'black') +
labs(title = paste('Histogram of', col), x = col, y = 'Frequency') +
theme_minimal()
print(p)
}
# Q-Q Plots
for (col in numerical_cols) {
p <- ggplot(data_cleaned, aes(sample = !!sym(col))) +
stat_qq() +
stat_qq_line(color = 'red') +
labs(title = paste('Q-Q Plot of', col), x = 'Theoretical Quantiles', y = 'Sample Quantiles') +
theme_minimal()
print(p)
}
dev.off()
# --- 5. Correlation Tests (Pearson and Spearman) ---
print('--- Correlation Tests with University_Ranking_Score ---')
dependent_var <- 'University_Ranking_Score'
independent_numerical_vars <- numerical_cols[numerical_cols != dependent_var]
# Pearson correlation tests
print('--- Pearson Correlation ---')
for (col in independent_numerical_vars) {
cor_test_pearson <- cor.test(data_cleaned[[col]], data_cleaned[[dependent_var]], method = 'pearson')
print(paste('Pearson Correlation between', col, 'and', dependent_var))
print(cor_test_pearson)
}
# Spearman correlation tests
print('--- Spearman Correlation ---')
for (col in independent_numerical_vars) {
cor_test_spearman <- cor.test(data_cleaned[[col]], data_cleaned[[dependent_var]], method = 'spearman')
print(paste('Spearman Correlation between', col, 'and', dependent_var))
print(cor_test_spearman)
}
# --- 6. Correlation Matrices (Pearson and Spearman) ---
library(corrplot)
print('--- Correlation Matrices ---')
# Pearson Correlation Matrix
print('--- Pearson Correlation Matrix ---')
correlation_matrix_pearson <- cor(data_cleaned[numerical_cols], method = 'pearson')
print(correlation_matrix_pearson)
# Spearman Correlation Matrix
print('--- Spearman Correlation Matrix ---')
correlation_matrix_spearman <- cor(data_cleaned[numerical_cols], method = 'spearman')
print(correlation_matrix_spearman)
png('UQR_Correlation_Matrix_Pearson.png', width = 800, height = 600)
corrplot(correlation_matrix_pearson, method = "circle", type = "lower",
tl.cex = 0.8, number.cex = 0.7, title = "Pearson Correlation Matrix")
dev.off()
png('UQR_Correlation_Matrix_Spearman.png', width = 800, height = 600)
corrplot(correlation_matrix_spearman, method = "circle", type = "lower",
tl.cex = 0.8, number.cex = 0.7, title = "Spearman Correlation Matrix")
dev.off()
# --- 7. Scatter Plots with Regression Lines ---
library(ggplot2)
library(rlang)
print('--- Generating Scatter Plots with Regression Lines ---')
for (col in independent_numerical_vars) {
safe_col_name <- gsub("[^A-Za-z0-9_]", "_", col)
file_name <- paste0('Scatter_', dependent_var, '_vs_', safe_col_name, '.png')
if (length(unique(na.omit(data_cleaned[[col]]))) > 1) {
png(filename = file_name, width = 800, height = 600)
p <- ggplot(data_cleaned, aes(x = !!sym(col), y = !!sym(dependent_var))) +
geom_point(alpha = 0.6) +
geom_smooth(method = 'lm', col = 'blue', se = TRUE) +
labs(title = paste('Scatter Plot of', dependent_var, 'vs.', col),
x = col, y = dependent_var) +
theme_minimal()
print(p)
dev.off()
} else {
print(paste('Skipping', col, '- not enough variation to plot.'))
}
}
# --- 8. Simple Linear Regression ---
print('--- Simple Linear Regression ---')
simple_lm_model <- lm(`University_Ranking_Score` ~ `Graduation_Rate_(Perc)`, data = data_cleaned)
print('Simple Linear Regression Model: University_Ranking_Score ~ Graduation_Rate_(Perc)')
print(summary(simple_lm_model))
lm_model_faculty <- lm(`University_Ranking_Score` ~ `Faculty_Salary_Avg`, data = data_cleaned)
summary(lm_model_faculty)
# --- 9. Multiple Linear Regression ---
print('--- Multiple Linear Regression ---')
safe_names <- function(col_names) {
sapply(col_names, function(name) {
if (grepl("[^[:alnum:]_]", name)) {
paste0("`", name, "`")
} else {
name
}
})
}
predictors_for_mlr <- numerical_cols[numerical_cols != dependent_var]
escaped_dep_var <- safe_names(dependent_var)
escaped_preds <- safe_names(predictors_for_mlr)
mlr_formula <- as.formula(
paste(escaped_dep_var, "~", paste(escaped_preds, collapse = " + "))
)
multiple_lm_model <- lm(mlr_formula, data = data_cleaned)
print('Multiple Linear Regression Model:')
print(mlr_formula)
print(summary(multiple_lm_model))
# --- 10. Model Summary and Interpretation (Code Only) ---
print('--- Model Summaries for Interpretation ---')
# Summary of the simple linear regression model
print('Summary of Simple Linear Regression Model:')
print(summary(simple_lm_model))
# Summary of the multiple linear regression model
print('Summary of Multiple Linear Regression Model:')
print(summary(multiple_lm_model))
# Accessing coefficients
print('Coefficients of Simple Linear Regression Model:')
print(coef(simple_lm_model))
print('Coefficients of Multiple Linear Regression Model:')
print(coef(multiple_lm_model))
# Accessing residuals
print('Residuals of Simple Linear Regression Model (first 6):')
print(head(residuals(simple_lm_model)))
print('Residuals of Multiple Linear Regression Model (first 6):')
print(head(residuals(multiple_lm_model)))
# Accessing fitted values
print('Fitted Values of Simple Linear Regression Model (first 6):')
print(head(fitted(simple_lm_model)))
print('Fitted Values of Multiple Linear Regression Model (first 6):')
print(head(fitted(multiple_lm_model)))
library(psych)
# Detailed summary table
describe(data_cleaned[numerical_cols])
# Mode calculation for each variable
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sapply(data_cleaned[numerical_cols], get_mode)
library(ggplot2)
for (col in numerical_cols) {
ggplot(data_cleaned, aes(x = "", y = !!sym(col))) +
geom_boxplot(fill = "lightgreen") +
labs(title = paste("Boxplot of", col), y = col) +
theme_minimal()
}
library(ggplot2)
for (col in numerical_cols) {
ggplot(data_cleaned, aes(x = "", y = !!sym(col))) +
geom_boxplot(fill = "lightgreen") +
labs(title = paste("Boxplot of", col), y = col) +
theme_minimal()
}
library(ggplot2)
for (col in numerical_cols) {
ggplot(data_cleaned, aes(x = "", y = !!sym(col))) +
geom_boxplot(fill = "lightgreen") +
labs(title = paste("Boxplot of", col), y = col) +
theme_minimal()
}
alpha <- 0.05
# Shapiro-Wilk with hypothesis
for (col in numerical_cols) {
if (length(unique(data_cleaned[[col]])) > 1) {
cat("\n---", col, "---\n")
cat("H0: Data is normally distributed\n")
cat("H1: Data is NOT normally distributed\n")
shapiro_test <- shapiro.test(data_cleaned[[col]])
print(shapiro_test)
if (shapiro_test$p.value < alpha) {
cat("Decision: Reject H0
→ Data is NOT normally distributed\n")
} else {
cat("Decision: Fail to reject H0
→ Data may be normally distributed\n")
}
}
}
# Simple regression
coef_simple <- coef(simple_lm_model)
cat("Simple Regression Equation:\n")
cat("University_Ranking_Score =",
round(coef_simple[1], 4), "+", round(coef_simple[2], 4), "* Graduation_Rate_(Perc)\n")
# Multiple regression
coef_multi <- coef(multiple_lm_model)
cat("\nMultiple Regression Equation:\nUniversity_Ranking_Score =",
round(coef_multi[1], 4), "+",
paste(paste(round(coef_multi[-1], 4), "*", names(coef_multi)[-1]), collapse = " + "), "\n")
q()
